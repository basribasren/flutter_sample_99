import 'bloc/data_encryption_bloc.dart';import 'models/data_encryption_model.dart';import 'package:basri_s_application10/core/app_export.dart';import 'package:basri_s_application10/core/utils/validation_functions.dart';import 'package:basri_s_application10/widgets/app_bar/appbar_image.dart';import 'package:basri_s_application10/widgets/app_bar/appbar_title.dart';import 'package:basri_s_application10/widgets/app_bar/custom_app_bar.dart';import 'package:basri_s_application10/widgets/custom_button.dart';import 'package:basri_s_application10/widgets/custom_drop_down.dart';import 'package:basri_s_application10/widgets/custom_text_form_field.dart';import 'package:flutter/material.dart';
// ignore_for_file: must_be_immutable
class DataEncryptionScreen extends StatelessWidget {GlobalKey<FormState> _formKey = GlobalKey<FormState>();

static Widget builder(BuildContext context) { return BlocProvider<DataEncryptionBloc>(create: (context) => DataEncryptionBloc(DataEncryptionState(dataEncryptionModelObj: DataEncryptionModel()))..add(DataEncryptionInitialEvent()), child: DataEncryptionScreen()); } 
@override Widget build(BuildContext context) { return SafeArea(child: Scaffold(backgroundColor: ColorConstant.gray50, resizeToAvoidBottomInset: false, appBar: CustomAppBar(height: getVerticalSize(53), leadingWidth: 40, leading: AppbarImage(height: getSize(24), width: getSize(24), svgPath: ImageConstant.imgArrowleft, margin: getMargin(left: 16, top: 12, bottom: 17), onTap: () {onTapArrowleft26(context);}), centerTitle: true, title: AppbarTitle(text: "lbl_data_encryption".tr)), body: Form(key: _formKey, child: Container(width: double.maxFinite, padding: getPadding(left: 16, top: 23, right: 16, bottom: 23), child: Column(crossAxisAlignment: CrossAxisAlignment.start, mainAxisAlignment: MainAxisAlignment.start, children: [Text("lbl_email_id".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: AppStyle.txtGilroyMedium16Bluegray800), BlocSelector<DataEncryptionBloc, DataEncryptionState, TextEditingController?>(selector: (state) => state.emailController, builder: (context, emailController) {return CustomTextFormField(focusNode: FocusNode(), controller: emailController, hintText: "msg_michellerock_gmail_com".tr, margin: getMargin(top: 8), textInputType: TextInputType.emailAddress, validator: (value) {if (value == null || (!isValidEmail(value, isRequired: true))) {return "Please enter valid email";} return null;});}), Padding(padding: getPadding(top: 19), child: Text("lbl_password".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: AppStyle.txtGilroyMedium16Bluegray900)), BlocBuilder<DataEncryptionBloc, DataEncryptionState>(builder: (context, state) {return CustomTextFormField(focusNode: FocusNode(), controller: state.group10198Controller, hintText: "lbl_enter_password".tr, margin: getMargin(top: 7), padding: TextFormFieldPadding.PaddingT12, textInputType: TextInputType.visiblePassword, suffix: InkWell(onTap: () {context.read<DataEncryptionBloc>().add(ChangePasswordVisibilityEvent(value: !state.isShowPassword));}, child: Container(margin: getMargin(all: 12), child: CustomImageView(svgPath: state.isShowPassword ? ImageConstant.imgEye : ImageConstant.imgEye))), suffixConstraints: BoxConstraints(maxHeight: getVerticalSize(44)), validator: (value) {if (value == null || (!isValidPassword(value, isRequired: true))) {return "Please enter valid password";} return null;}, isObscureText: state.isShowPassword);}), Padding(padding: getPadding(top: 18), child: Text("msg_confirm_password".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: AppStyle.txtGilroyMedium16Bluegray900)), BlocBuilder<DataEncryptionBloc, DataEncryptionState>(builder: (context, state) {return CustomTextFormField(focusNode: FocusNode(), controller: state.group10198OneController, hintText: "lbl_enter_password".tr, margin: getMargin(top: 8), padding: TextFormFieldPadding.PaddingT12, textInputType: TextInputType.visiblePassword, suffix: InkWell(onTap: () {context.read<DataEncryptionBloc>().add(ChangePasswordVisibilityEvent1(value: !state.isShowPassword1));}, child: Container(margin: getMargin(all: 12), child: CustomImageView(svgPath: state.isShowPassword1 ? ImageConstant.imgEye : ImageConstant.imgEye))), suffixConstraints: BoxConstraints(maxHeight: getVerticalSize(44)), validator: (value) {if (value == null || (!isValidPassword(value, isRequired: true))) {return "Please enter valid password";} return null;}, isObscureText: state.isShowPassword1);}), Padding(padding: getPadding(top: 18), child: Text("lbl_location".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: AppStyle.txtGilroyMedium16Bluegray900)), Padding(padding: getPadding(top: 8), child: Row(mainAxisAlignment: MainAxisAlignment.center, children: [Expanded(child: BlocSelector<DataEncryptionBloc, DataEncryptionState, DataEncryptionModel?>(selector: (state) => state.dataEncryptionModelObj, builder: (context, dataEncryptionModelObj) {return CustomDropDown(focusNode: FocusNode(), icon: Container(margin: getMargin(left: 30, right: 14), child: CustomImageView(svgPath: ImageConstant.imgArrowdownBlueGray600)), hintText: "lbl_amsterdam".tr, margin: getMargin(right: 8), items: dataEncryptionModelObj?.dropdownItemList ?? [], onChanged: (value) {context.read<DataEncryptionBloc>().add(ChangeDropDownEvent(value: value));});})), Expanded(child: BlocSelector<DataEncryptionBloc, DataEncryptionState, TextEditingController?>(selector: (state) => state.group10199Controller, builder: (context, group10199Controller) {return CustomTextFormField(focusNode: FocusNode(), controller: group10199Controller, hintText: "lbl_netherland".tr, margin: getMargin(left: 8), textInputAction: TextInputAction.done);}))])), CustomButton(height: getVerticalSize(50), text: "lbl_save".tr, margin: getMargin(top: 24, bottom: 5))]))))); } 
onTapArrowleft26(BuildContext context) { NavigatorService.goBack(); } 
 }
