import '../multi_select_screen/widgets/gridrectangleseventeen1_item_widget.dart';import '../multi_select_screen/widgets/gridrectangleten2_item_widget.dart';import 'bloc/multi_select_bloc.dart';import 'models/gridrectangleseventeen1_item_model.dart';import 'models/gridrectangleten2_item_model.dart';import 'models/multi_select_model.dart';import 'package:basri_s_application10/core/app_export.dart';import 'package:basri_s_application10/widgets/custom_checkbox.dart';import 'package:flutter/material.dart';class MultiSelectScreen extends StatelessWidget {static Widget builder(BuildContext context) { return BlocProvider<MultiSelectBloc>(create: (context) => MultiSelectBloc(MultiSelectState(multiSelectModelObj: MultiSelectModel()))..add(MultiSelectInitialEvent()), child: MultiSelectScreen()); } 
@override Widget build(BuildContext context) { return SafeArea(child: Scaffold(backgroundColor: ColorConstant.gray50, body: Container(width: double.maxFinite, padding: getPadding(left: 16, top: 6, right: 16, bottom: 6), child: Column(crossAxisAlignment: CrossAxisAlignment.start, mainAxisAlignment: MainAxisAlignment.start, children: [Padding(padding: getPadding(top: 4), child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [CustomImageView(svgPath: ImageConstant.imgArrowleftBlueGray900, height: getSize(24), width: getSize(24), margin: getMargin(top: 2, bottom: 2), onTap: () {onTapImgArrowleft(context);}), BlocSelector<MultiSelectBloc, MultiSelectState, bool?>(selector: (state) => state.isCheckbox, builder: (context, isCheckbox) {return CustomCheckbox(width: getHorizontalSize(257), text: "lbl_4_selected".tr, value: isCheckbox, fontStyle: CheckboxFontStyle.GilroySemiBold24, isRightCheck: true, onChange: (value) {context.read<MultiSelectBloc>().add(ChangeCheckBoxEvent(value: value));});})])), Padding(padding: getPadding(top: 37), child: Text("lbl_recent2".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: AppStyle.txtGilroySemiBold18Bluegray900)), Padding(padding: getPadding(top: 11), child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [Container(height: getSize(130), width: getSize(130), child: Stack(alignment: Alignment.center, children: [CustomImageView(imagePath: ImageConstant.imgRectangle10130x1302, height: getSize(130), width: getSize(130), alignment: Alignment.center), Align(alignment: Alignment.center, child: Container(height: getSize(130), width: getSize(130), padding: getPadding(all: 45), decoration: AppDecoration.fillBlack9004c, child: Stack(children: [CustomImageView(svgPath: ImageConstant.imgCheckmark, height: getSize(40), width: getSize(40), alignment: Alignment.center)])))])), Container(height: getSize(130), width: getSize(130), child: Stack(alignment: Alignment.center, children: [CustomImageView(imagePath: ImageConstant.imgRectangle11130x1302, height: getSize(130), width: getSize(130), alignment: Alignment.center), Align(alignment: Alignment.center, child: Container(height: getSize(130), width: getSize(130), padding: getPadding(all: 45), decoration: AppDecoration.fillBlack9004c, child: Stack(children: [CustomImageView(svgPath: ImageConstant.imgCheckmark, height: getSize(40), width: getSize(40), alignment: Alignment.center)])))])), Container(height: getSize(130), width: getSize(130), child: Stack(alignment: Alignment.center, children: [CustomImageView(imagePath: ImageConstant.imgRectangle12130x1302, height: getSize(130), width: getSize(130), alignment: Alignment.center), Align(alignment: Alignment.center, child: Container(height: getSize(130), width: getSize(130), child: Stack(alignment: Alignment.center, children: [CustomImageView(svgPath: ImageConstant.imgVideocamera, height: getSize(24), width: getSize(24), alignment: Alignment.bottomLeft, margin: getMargin(left: 4)), Align(alignment: Alignment.center, child: Container(height: getSize(130), width: getSize(130), padding: getPadding(all: 45), decoration: AppDecoration.fillBlack9004c, child: Stack(children: [CustomImageView(svgPath: ImageConstant.imgCheckmark, height: getSize(40), width: getSize(40), alignment: Alignment.center)])))])))]))])), Padding(padding: getPadding(top: 19), child: Text("lbl_last_week".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: AppStyle.txtGilroySemiBold18Bluegray900)), Padding(padding: getPadding(top: 11), child: BlocSelector<MultiSelectBloc, MultiSelectState, MultiSelectModel?>(selector: (state) => state.multiSelectModelObj, builder: (context, multiSelectModelObj) {return GridView.builder(shrinkWrap: true, gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(mainAxisExtent: getVerticalSize(131), crossAxisCount: 3, mainAxisSpacing: getHorizontalSize(3), crossAxisSpacing: getHorizontalSize(3)), physics: NeverScrollableScrollPhysics(), itemCount: multiSelectModelObj?.gridrectangleten2ItemList.length ?? 0, itemBuilder: (context, index) {Gridrectangleten2ItemModel model = multiSelectModelObj?.gridrectangleten2ItemList[index] ?? Gridrectangleten2ItemModel(); return Gridrectangleten2ItemWidget(model);});})), Padding(padding: getPadding(top: 19), child: Text("lbl_last_week".tr, overflow: TextOverflow.ellipsis, textAlign: TextAlign.left, style: AppStyle.txtGilroySemiBold18Bluegray900)), Padding(padding: getPadding(top: 11), child: BlocSelector<MultiSelectBloc, MultiSelectState, MultiSelectModel?>(selector: (state) => state.multiSelectModelObj, builder: (context, multiSelectModelObj) {return GridView.builder(shrinkWrap: true, gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(mainAxisExtent: getVerticalSize(131), crossAxisCount: 3, mainAxisSpacing: getHorizontalSize(3), crossAxisSpacing: getHorizontalSize(3)), physics: NeverScrollableScrollPhysics(), itemCount: multiSelectModelObj?.gridrectangleseventeen1ItemList.length ?? 0, itemBuilder: (context, index) {Gridrectangleseventeen1ItemModel model = multiSelectModelObj?.gridrectangleseventeen1ItemList[index] ?? Gridrectangleseventeen1ItemModel(); return Gridrectangleseventeen1ItemWidget(model);});}))])))); } 
onTapImgArrowleft(BuildContext context) { NavigatorService.goBack(); } 
 }
